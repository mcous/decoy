name: "Continuous integration"

on: [push, pull_request]

env:
    PIP_CACHE_DIR: ${{ github.workspace }}/.cache/pip
    POETRY_CACHE_DIR: ${{ github.workspace }}/.cache/pypoetry
    DEFAULT_PYTHON: "3.8"

jobs:
    test:
        name: "Test Python ${{ matrix.python-version }} on ${{ matrix.os }}"
        runs-on: ${{ matrix.os }}-latest
        strategy:
            matrix:
                os: [Ubuntu, Windows, macOS]
                python-version: ["3.6", "3.7", "3.8", "3.9", "3.10.0-rc"]
        steps:
            - name: "Check out repository"
              uses: actions/checkout@v2

            - name: "Set up Python"
              uses: actions/setup-python@v2
              with:
                  python-version: ${{ matrix.python-version }}

            - name: "Set up dependency cache"
              uses: actions/cache@v2
              # poetry venv restore is buggy on windows
              # https://github.com/python-poetry/poetry/issues/2629
              if: ${{ matrix.os != 'Windows' }}
              with:
                  key: deps-${{ secrets.GH_CACHE }}-${{ runner.os }}-python${{ matrix.python-version }}-${{ hashFiles('**/*.lock') }}
                  path: |
                      ${{ env.PIP_CACHE_DIR }}
                      ${{ env.POETRY_CACHE_DIR }}

            - name: "Install poetry"
              run: pip install poetry

            - name: "Install dependencies"
              run: poetry install

            - name: "Run tests"
              run: poetry run coverage run --branch --source=decoy -m pytest --mypy-same-process

            - name: "Generate coverage report"
              run: poetry run coverage xml

            - name: "Upload coverage report"
              uses: codecov/codecov-action@v2

    check:
        name: "Lint and type checks"
        runs-on: ubuntu-latest
        steps:
            - name: "Check out repository"
              uses: actions/checkout@v2

            - name: "Set up Python"
              uses: actions/setup-python@v2
              with:
                  python-version: ${{ env.DEFAULT_PYTHON }}

            - name: "Set up dependency cache"
              uses: actions/cache@v2
              with:
                  key: deps-${{ secrets.GH_CACHE }}-${{ runner.os }}-python${{ env.DEFAULT_PYTHON }}-${{ hashFiles('**/*.lock') }}
                  path: |
                      ${{ env.PIP_CACHE_DIR }}
                      ${{ env.POETRY_CACHE_DIR }}

            - name: "Install poetry"
              run: pip install poetry

            - name: "Install dependencies"
              run: poetry install

            - name: "Check formatting"
              run: poetry run black --check .

            - name: "Check linter"
              run: poetry run flake8

            - name: "Checks types"
              run: poetry run mypy

    build:
        name: Build assets and deploy on tags
        runs-on: ubuntu-latest
        needs: [test, check]
        steps:
            - name: "Check out repository"
              uses: actions/checkout@v2

            - name: "Set up Python"
              uses: actions/setup-python@v2
              with:
                  python-version: ${{ env.DEFAULT_PYTHON }}

            - name: "Set up dependency cache"
              uses: actions/cache@v2
              with:
                  key: deps-${{ secrets.GH_CACHE }}-${{ runner.os }}-python${{ env.DEFAULT_PYTHON }}-${{ hashFiles('**/*.lock') }}
                  path: |
                      ${{ env.PIP_CACHE_DIR }}
                      ${{ env.POETRY_CACHE_DIR }}

            - name: "Install poetry"
              run: pip install poetry

            - name: "Install dependencies"
              run: poetry install

            - name: "Build artifacts"
              run: |
                  poetry build
                  poetry run mkdocs build

            - name: "Deploy to PyPI and GitHub Pages"
              if: startsWith(github.ref, 'refs/tags/v')
              env:
                  USER_NAME: ${{ github.actor }}
                  USER_ID: ${{ github.event.sender.id }}
                  PYPI_TOKEN: ${{ secrets.PYPI_TOKEN }}
              run: |
                  git config user.name "$USER_NAME (GitHub Actions)"
                  git config user.email "$USER_ID+$USER_NAME@users.noreply.github.com"
                  poetry config pypi-token.pypi $PYPI_TOKEN
                  poetry publish
                  poetry run mkdocs gh-deploy --force
