# typing tests

- case: mock_cls_mimics_type
  main: |
      from decoy import Decoy

      class Dependency():
          def do_thing(self, input: str) -> int:
              return 42

      decoy = Decoy()
      fake = decoy.mock(cls=Dependency)
      reveal_type(fake)
  out: |
      main:9: note: Revealed type is "main.Dependency*"

- case: mock_cls_mimics_abstract_class_type
  main: |
      from abc import ABC
      from decoy import Decoy

      class Dependency(ABC):
          def do_thing(self, input: str) -> int:
              ...

      decoy = Decoy()
      fake = decoy.mock(cls=Dependency)
      reveal_type(fake)
  out: |
      main:10: note: Revealed type is "main.Dependency*"

- case: mock_func_mimics_type
  main: |
      from decoy import Decoy

      def do_thing(input: str) -> int:
          return 42

      decoy = Decoy()
      fake = decoy.mock(func=do_thing)
      reveal_type(fake)
  out: |
      main:8: note: Revealed type is "def (input: builtins.str) -> builtins.int"

- case: deprecated_create_decoy_mimics_type
  main: |
      from decoy import Decoy

      class Dependency():
          def do_thing(self, input: str) -> int:
              return 42

      decoy = Decoy()
      fake = decoy.create_decoy(spec=Dependency)
      reveal_type(fake)
  out: |
      main:9: note: Revealed type is "main.Dependency*"

- case: deprecated_create_decoy_mimics_abstract_class_type
  main: |
      from abc import ABC
      from decoy import Decoy

      class Dependency(ABC):
          def do_thing(self, input: str) -> int:
              ...

      decoy = Decoy()
      fake = decoy.create_decoy(spec=Dependency)
      reveal_type(fake)
  out: |
      main:10: note: Revealed type is "main.Dependency*"

- case: deprecated_create_decoy_func_mimics_type
  main: |
      from decoy import Decoy

      def do_thing(input: str) -> int:
          return 42

      decoy = Decoy()
      fake = decoy.create_decoy_func(spec=do_thing)
      reveal_type(fake)
  out: |
      main:8: note: Revealed type is "def (input: builtins.str) -> builtins.int"

- case: class_stub_mimics_return_type
  main: |
      from decoy import Decoy

      class Dependency():
          def do_thing(self, input: str) -> int:
              return 42

      decoy = Decoy()
      fake = decoy.mock(cls=Dependency)

      decoy.when(fake.do_thing("hello")).then_return(42)
      decoy.when(fake.do_thing("goodbye")).then_return("wrong-type")
  out: |
      main:11: error: Argument 1 to "then_return" of "Stub" has incompatible type "str"; expected "int"  [arg-type]

- case: function_stub_mimics_return_type
  main: |
      from decoy import Decoy

      def do_thing(input: str) -> int:
          return 42

      decoy = Decoy()
      fake = decoy.mock(func=do_thing)

      decoy.when(fake("hello")).then_return(42)
      decoy.when(fake("goodbye")).then_return("wrong-type")
  out: |
      main:10: error: Argument 1 to "then_return" of "Stub" has incompatible type "str"; expected "int"  [arg-type]

- case: matchers_mimic_types
  main: |
      from decoy import matchers

      reveal_type(matchers.Anything())
      reveal_type(matchers.IsA(str))
      reveal_type(matchers.IsNot(str))
      reveal_type(matchers.StringMatching("foobar"))
      reveal_type(matchers.ErrorMatching(RuntimeError))
      reveal_type(matchers.Captor())
  out: |
      main:3: note: Revealed type is "Any"
      main:4: note: Revealed type is "Any"
      main:5: note: Revealed type is "Any"
      main:6: note: Revealed type is "builtins.str"
      main:7: note: Revealed type is "builtins.Exception"
      main:8: note: Revealed type is "Any"
